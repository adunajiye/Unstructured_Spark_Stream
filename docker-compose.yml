version: '3.8'

volumes:
  pinotController1:
  pinotServer1:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://164.92.85.68:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: 164.92.85.68
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z 164.92.85.68 9092' ]
      interval: 20s
      timeout: 60s
      retries: 10

  elasticsearch:  # Added Elasticsearch service
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
     
  kibana:
      image: docker.elastic.co/kibana/kibana:7.13.2
      container_name: kibana
      ports:
        - "5601:5601"
      environment:
        - ELASTICSEARCH_URL=http://elasticsearch:9200
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      depends_on:
        - elasticsearch
      networks:
        - backend

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "25060:25060"
    environment:
      POSTGRES_USER: doadmin
      POSTGRES_PASSWORD: AVNS_18bVhfxQtTTBCXwY6Lw
      POSTGRES_DB: defaultdb
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  spark-master:
   image: bitnami/spark:latest
   command: bin/spark-class org.apache.spark.deploy.master.Master
   ports:
     - "9090:8080"
     - "7077:7077"

  spark-worker:
   image: bitnami/spark:latest
   command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://143.198.142.146:7077
   depends_on:
     - spark-master
   environment:
     SPARK_MODE: worker
     SPARK_WORKER_CORES: 2
     SPARK_WORKER_MEMORY: 12g
     SPARK_MASTER_URL: spark://143.198.142.146:7077
networks:
  backend: